Matplotlib — Data Visualization Library

-------------------------------------------------------------
1) Definition
Matplotlib is a Python 2D data visualization library used to create static, interactive, and animated plots.
- Primary module: matplotlib.pyplot
- Supports line plots, bar charts, pie charts, scatter plots, histograms, subplots, and more.
- Integrates with NumPy, Pandas, and SciKit-Learn for seamless plotting.

-------------------------------------------------------------
2) Explanation
- Plots follow a Figure → Axes → Plot elements hierarchy.
- Provides a state-based interface (pyplot) similar to MATLAB.
- Highly customizable: colors, line styles, markers, labels, titles, legends, grids.
- Can save plots in multiple formats: PNG, PDF, SVG, JPG.
- Ideal for data analysis, ML model visualization, statistics, and business reporting.

-------------------------------------------------------------
3) Real-Life Examples
- Visualizing trends in stock prices or sales data.
- Comparing performance metrics for different machine learning models.
- Analyzing distributions of exam scores using histograms.
- Exploring relationships between two variables with scatter plots.
- Showing proportions (e.g., market share) via pie charts.

-------------------------------------------------------------
4) How it Works
1. Import matplotlib.pyplot for plotting.
2. Prepare data (lists, arrays, or Pandas Series/DataFrames).
3. Choose plot type (line, bar, pie, scatter, histogram, boxplot, subplot).
4. Customize visuals: title, labels, legends, colors, markers, line styles, axis limits.
5. Display the figure (plt.show()) or save it (plt.savefig()).

-------------------------------------------------------------
5) Key Concepts
- Figure → The entire plot or image.
- Axes → The plotting area within the figure.
- Plot Elements → Lines, markers, bars, text, grids.
- State-Based Interface → Pyplot tracks the current figure and axes.
- Object-Oriented Interface → Directly manipulate Figure and Axes objects.
- Customizations → Colors, line styles, markers, alpha (transparency), grids, legends, tick labels, axis limits.
- Subplots → Multiple plots in one figure, independent axes for each plot.
- Integration → Works with Pandas plotting, NumPy arrays, SciKit-Learn visualizations.

-------------------------------------------------------------
6) Core Plot Types
- Line Plot → Show trends over continuous data.
- Bar Chart → Compare categorical data.
- Horizontal Bar Chart → Compare categorical data horizontally.
- Pie Chart → Show proportions and percentages.
- Histogram → Display frequency distributions.
- Scatter Plot → Analyze relationships between two variables.
- Box Plot → Show spread, median, and outliers of data.
- Subplots → Combine multiple plot types in one figure.

-------------------------------------------------------------
7) Best Practices
- Always label axes and add titles.
- Use clear, contrasting colors for readability.
- Adjust figure size (figsize) to prevent overcrowding.
- Avoid excessive data in one plot.
- Normalize or scale data for fair comparison when needed.
- Save high-resolution figures (dpi=300) for reports.
- Use legends and grids judiciously for clarity.

-------------------------------------------------------------
8) Summary
- Matplotlib = Flexible, professional plotting library for Python.
- Use pyplot for quick plots or object-oriented API for full control.
- Supports nearly all 2D visualizations required in data science, ML, statistics, and business analysis.
- Works seamlessly with Pandas, NumPy, and SciKit-Learn.
- Key takeaway: focus on clarity, readability, and meaningful visualization rather than decoration.
